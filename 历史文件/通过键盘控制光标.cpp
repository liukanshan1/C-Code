/* 学号 姓名 班级 */
#include <iostream>
#include <cstdio>
#include <conio.h>
#include <time.h>
#include <windows.h>
using namespace std;

const int MAX_X = 69;	//定义*组成的边框的宽度
const int MAX_Y = 17;	//定义*组成的边框的高度

/***************************************************************************
  函数名称：
  功    能：完成与system("cls")一样的功能，但效率高
  输入参数：
  返 回 值：
  说    明：清除整个屏幕缓冲区，不仅仅是可见窗口区域(使用当前颜色)
***************************************************************************/
void cls(const HANDLE hout)
{
	COORD coord = { 0, 0 };
	CONSOLE_SCREEN_BUFFER_INFO binfo; /* to get buffer info */
	DWORD num;

	/* 取当前缓冲区信息 */
	GetConsoleScreenBufferInfo(hout, &binfo);
	/* 填充字符 */
	FillConsoleOutputCharacter(hout, (TCHAR)' ', binfo.dwSize.X * binfo.dwSize.Y, coord, &num);
	/* 填充属性 */
	FillConsoleOutputAttribute(hout, binfo.wAttributes, binfo.dwSize.X * binfo.dwSize.Y, coord, &num);

	/* 光标回到(0,0) */
	SetConsoleCursorPosition(hout, coord);
	return;
}

/***************************************************************************
  函数名称：gotoxy
  功    能：将光标移动到指定位置
  输入参数：HANDLE hout ：输出设备句柄
			int X       ：指定位置的x坐标
			int Y       ：指定位置的y坐标
***************************************************************************/
void gotoxy(const HANDLE hout, const int X, const int Y)
{
	COORD coord;
	coord.X = X;
	coord.Y = Y;
	SetConsoleCursorPosition(hout, coord);
}

/***************************************************************************
  函数名称：showch
  功    能：在指定位置处打印一个指定的字符
  输入参数：HANDLE hout ：输出设备句柄
			int X       ：指定位置的x坐标
			int Y       ：指定位置的y坐标
			char ch     ：要打印的字符
***************************************************************************/
void showch(const HANDLE hout, const int X, const int Y, const char ch)
{
	gotoxy(hout, X, Y);
	putchar(ch);
}

/***************************************************************************
  函数名称：init_border
  功    能：显示初始的边框及随机字符
  输入参数：HANDLE hout：输出设备句柄
***************************************************************************/
void init_border(const HANDLE hout)
{
	gotoxy(hout, 0, 0);	//光标移回左上角(0,0)
	cout << "***********************************************************************" << endl;
	cout << "*                                                                     *" << endl;
	cout << "*                                                                     *" << endl;
	cout << "*                                                                     *" << endl;
	cout << "*                                                                     *" << endl;
	cout << "*                                                                     *" << endl;
	cout << "*                                                                     *" << endl;
	cout << "*                                                                     *" << endl;
	cout << "*                                                                     *" << endl;
	cout << "*                                                                     *" << endl;
	cout << "*                                                                     *" << endl;
	cout << "*                                                                     *" << endl;
	cout << "*                                                                     *" << endl;
	cout << "*                                                                     *" << endl;
	cout << "*                                                                     *" << endl;
	cout << "*                                                                     *" << endl;
	cout << "*                                                                     *" << endl;
	cout << "*                                                                     *" << endl;
	cout << "***********************************************************************" << endl;

	/* 随机显示20个大写字母，字母的值、XY坐标都随机显示
	   rand()函数的功能：随机生成一个在 0-32767 之间的整数
	   思考：在什么情况下，下面这个循环执行生成后，你看到的实际字母个数不足20个？ */
	int i;
	for (i = 0; i < 20; i++)
		showch(hout, rand() % MAX_X + 1, rand() % MAX_Y + 1, 'A' + rand() % 26);

	return;
}

void move_by_ijkl(int &x,int &y,char ijkl,char m)
{
	if (m == '1')
	{
		if (ijkl == 'i' || ijkl == 'I')
		{
			y -= 1;
			if (y < 1 || y > 17)
			{
				y += 1;
			}
		}
		else if (ijkl == 'k' || ijkl == 'K')
		{
			y += 1;
			if (y < 1 || y > 17)
			{
				y -= 1;
			}
		}
		else if (ijkl == 'j' || ijkl == 'J')
		{
			x -= 1;
			if (x < 1 || x > 69)
			{
				x += 1;
			}
		}
		else if (ijkl == 'l' || ijkl == 'L')
		{
			x += 1;
			if (x < 1 || x > 69)
			{
				x -= 1;
			}
		}
	}
	else if (m=='2')
	{
		if (ijkl == 'i' || ijkl == 'I')
		{
			y -= 1;
			if (y < 1 )
			{
				y =17;
			}
			else if (y>17)
			{
				y = 1;
			}
		}
		else if (ijkl == 'k' || ijkl == 'K' )
		{
			y += 1;
			if (y < 1)
			{
				y = 17;
			}
			else if (y > 17)
			{
				y = 1;
			}
		}
		else if (ijkl == 'j' || ijkl == 'J')
		{
			x -= 1;
			if (x < 1 )
			{
				x = 69;
			}
			else if (x>69)
			{
				x = 1;
			}
		}
		else if (ijkl == 'l' || ijkl == 'L')
		{
			x += 1;
			if (x < 1)
			{
				x = 69;
			}
			else if (x > 69)
			{
				x = 1;
			}
		}
	}
	else if (m == '5')
	{
		if (ijkl == 'i' || ijkl == 'I')
		{
			y -= 1;
			if (y < 1 || y > 17)
			{
				y += 1;
			}
		}
		else if (ijkl == 'k' || ijkl == 'K' )
		{
			y += 1;
			if (y < 1 || y > 17)
			{
				y -= 1;
			}
		}
		else if (ijkl == 'j' || ijkl == 'J')
		{
			x -= 1;
			if (x < 1 || x > 69)
			{
				x += 1;
			}
		}
		else if (ijkl == 'l' || ijkl == 'L')
		{
			x += 1;
			if (x < 1 || x > 69)
			{
				x -= 1;
			}
		}
	}
	else if (m == '6')
	{
		if (ijkl == 'i' || ijkl == 'I')
		{
			y -= 1;
			if (y < 1)
			{
				y = 17;
			}
			else if (y > 17)
			{
				y = 1;
			}
		}
		else if (ijkl == 'k' || ijkl == 'K' )
		{
			y += 1;
			if (y < 1)
			{
				y = 17;
			}
			else if (y > 17)
			{
				y = 1;
			}
		}
		else if (ijkl == 'j' || ijkl == 'J')
		{
			x -= 1;
			if (x < 1)
			{
				x = 69;
			}
			else if (x > 69)
			{
				x = 1;
			}
		}
		else if (ijkl == 'l' || ijkl == 'L')
		{
			x += 1;
			if (x < 1)
			{
				x = 69;
			}
			else if (x > 69)
			{
				x = 1;
			}
		}
	}

}

void move_by_arrow(int& x, int& y, char arrow, char m)
{
	if (m == '3')
	{
		if (int(arrow) == 72)  //向上
		{
			y -= 1;
			if (y < 1 || y > 17)
			{
				y += 1;
			}
		}
		else if (int(arrow) == 80)  //向下
		{
			y += 1;
			if (y < 1 || y > 17)
			{
				y -= 1;
			}
		}
		else if (int(arrow) == 75)  //向左
		{
			x -= 1;
			if (x < 1 || x > 69)
			{
				x += 1;
			}
		}
		else if (int(arrow) == 77)  //向右
		{
			x += 1;
			if (x < 1 || x > 69)
			{
				x -= 1;
			}
		}
	}
	else if (m == '4')
	{
		if (int(arrow) == 72)
		{
			y -= 1;
			if (y < 1)
			{
				y = 17;
			}
			else if (y > 17)
			{
				y = 1;
			}
		}
		else if (int(arrow) == 80)
		{
			y += 1;
			if (y < 1)
			{
				y = 17;
			}
			else if (y > 17)
			{
				y = 1;
			}
		}
		else if (int(arrow) == 75)
		{
			x -= 1;
			if (x < 1)
			{
				x = 69;
			}
			else if (x > 69)
			{
				x = 1;
			}
		}
		else if (int(arrow) == 77)
		{
			x += 1;
			if (x < 1)
			{
				x = 69;
			}
			else if (x > 69)
			{
				x = 1;
			}
		}
	}
}

int menu()
{
	cout << "1.用I、J、K、L键控制上下左右(大小写均可，边界停止)" << endl
		<< "2.用I、J、K、L键控制上下左右(大小写均可，边界回绕)" << endl
		<< "3.用箭头键控制上下左右，边界停止" << endl
		<< "4.用箭头键控制上下左右，边界回绕" << endl
		<< "5.用I、J、K、L键控制上下左右(大小写均可，边界停止，按左箭头不向下移动)" << endl
		<< "6.用I、J、K、L键控制上下左右(大小写均可，边界回绕，按左箭头不向下移动)" << endl
		<< "0.退出" << endl
		<< "[请选择0 - 6]";
	char menu;
	menu=_getch();  //头文件#include <conio.h> 不需要回车就输入数据
	return menu;
}


int main()
{
	while (true)
	{
		const HANDLE hout = GetStdHandle(STD_OUTPUT_HANDLE); //取标准输出设备对应的句柄
		int x = 35, y = 9;
		char m;
		m = menu();

		srand((unsigned int)(time(0)));  //生成伪随机数的种子，只需在程序开始时执行一次即可

		if (m == '1')
		{
			cls(hout);  //此句的作用是调用系统的cls命令清屏
			init_border(hout);  //显示初始的边框及其中的随机字符
			gotoxy(hout, x, y);  //光标到正中间
			char ijkl;
			while (true)
			{
				ijkl = _getch();
				if (ijkl == 'q' || ijkl == 'Q')
				{
					break;
				}
				else if (int(ijkl) == 32)
				{
					cout << " ";
					gotoxy(hout, x, y);
				}
				else
				{
					move_by_ijkl(x, y, ijkl, m);
					gotoxy(hout, x, y);
				}
			}
		}
		else if (m == '2')
		{
			cls(hout);  //此句的作用是调用系统的cls命令清屏
			init_border(hout);  //显示初始的边框及其中的随机字符
			gotoxy(hout, x, y);  //光标到正中间
			char ijkl;
			while (true)
			{
				ijkl = _getch();
				if (ijkl == 'q' || ijkl == 'Q')
				{
					break;
				}
				else if (int(ijkl) == 32)
				{
					cout << " ";
					gotoxy(hout, x, y);
				}
				else
				{
					move_by_ijkl(x, y, ijkl, m);
					gotoxy(hout, x, y);
				}
			}
		}
		else if (m == '3')
		{
			cls(hout);  //此句的作用是调用系统的cls命令清屏
			init_border(hout);  //显示初始的边框及其中的随机字符
			gotoxy(hout, x, y);  //光标到正中间
			char arrow;
			while (true)
			{
				arrow = _getch();
				if (int(arrow) == -32)
				{
					arrow = _getch();
					move_by_arrow(x, y, arrow, m);
					gotoxy(hout, x, y);
				}
				else if (arrow == 'q' || arrow == 'Q')
				{
					break;
				}
				else if (int(arrow) == 32)
				{
					cout << " ";
					gotoxy(hout, x, y);
				}
			}
		}
		else if (m == '4')
		{
			cls(hout);  //此句的作用是调用系统的cls命令清屏
			init_border(hout);  //显示初始的边框及其中的随机字符
			gotoxy(hout, x, y);  //光标到正中间
			char arrow;
			while (true)
			{
				arrow = _getch();
				if (int(arrow) == -32)
				{
					arrow = _getch();
					move_by_arrow(x, y, arrow, m);
					gotoxy(hout, x, y);
				}
				else if (arrow == 'q' || arrow == 'Q')
				{
					break;
				}
				else if (int(arrow) == 32)
				{
					cout << " ";
					gotoxy(hout, x, y);
				}
			}
		}
		else if (m == '5')
		{
			cls(hout);  //此句的作用是调用系统的cls命令清屏
			init_border(hout);  //显示初始的边框及其中的随机字符
			gotoxy(hout, x, y);  //光标到正中间
			char ijkl, ijkl2;
			while (true)
			{
				ijkl = _getch();  //输入左箭头时第一个getch得到了-32，第二个得到了75
				if (int(ijkl) == -32)
				{
					ijkl2 = _getch();
				}
				else if (int(ijkl) == 32)
				{
					cout << " ";
					gotoxy(hout, x, y);
				}
				else
				{
					if (ijkl == 'q' || ijkl == 'Q')
					{
						break;
					}
					else
					{
						move_by_ijkl(x, y, ijkl, m);
						gotoxy(hout, x, y);
					}
				}
			}
		}
		else if (m == '6')
		{
			cls(hout);  //此句的作用是调用系统的cls命令清屏
			init_border(hout);  //显示初始的边框及其中的随机字符
			gotoxy(hout, x, y);  //光标到正中间
			char ijkl, ijkl2;
			while (true)
			{
				ijkl = _getch();  //输入左箭头时第一个getch得到了-32，第二个得到了75
				if (int(ijkl) == -32)
				{
					ijkl2 = _getch();
				}
				else if (int(ijkl) == 32)
				{
					cout << " ";
					gotoxy(hout, x, y);
				}
				else
				{
					if (ijkl == 'q' || ijkl == 'Q')
					{
						break;
					}
					else
					{
						move_by_ijkl(x, y, ijkl, m);
						gotoxy(hout, x, y);
					}
				}
			}
		}
		else if (m == '0')
		{
			return 0;
		}

		gotoxy(hout, 0, 23);
		cout << "游戏结束，按回车键退出.";
		char ent;
		while (true)
		{
			ent = _getch();
			if (int(ent) == 13)
			{
				cls(hout);
				break;
			}
		}
		continue;	
	}
}
